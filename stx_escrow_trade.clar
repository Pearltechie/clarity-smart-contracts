(define-token stx-token)

(define-map trades 
  (string) 
  (tuple (principal) (list 5 (string)) (int) (int) (bool))
)  ; (seller, assets, total-price, paid-amount, confirmed)

(define-event trade-created (trade-id string seller principal assets (list 5 (string)) total-price int))
(define-event partial-payment (trade-id string payer principal paid-amount int))
(define-event trade-confirmed (trade-id string seller principal total-price int))
(define-event trade-refunded (trade-id string payer principal refund-amount int))
(define-event dispute-raised (trade-id string reason (string)))

(define-public (create-trade (trade-id string) (assets (list 5 (string))) (total-price int) (seller principal))
  (begin
    (if (is-none? (map-get? trades trade-id))
      (begin
        (map-set trades trade-id (tuple seller assets total-price 0 false))
        (print (event trade-created trade-id seller assets total-price))
        (ok "Trade created successfully"))
      (err "Trade ID already exists"))
  )
)

(define-public (make-payment (trade-id string) (amount int))
  (let (
        (trade (unwrap! (map-get? trades trade-id) (err "Trade not found")))
        (seller (get 0 trade))
        (assets (get 1 trade))
        (total-price (get 2 trade))
        (paid-amount (get 3 trade))
        (confirmed (get 4 trade))
      )
    (if (not confirmed)
      (let ((new-paid-amount (+ paid-amount amount)))
        (if (<= new-paid-amount total-price)
          (begin
            (map-set trades trade-id (tuple seller assets total-price new-paid-amount false))
            (print (event partial-payment trade-id tx-sender amount))
            (if (= new-paid-amount total-price)
              (ok "Payment completed, awaiting confirmation")
              (ok "Partial payment successful, awaiting full payment"))
          )
          (err "Payment exceeds the total price"))
      )
      (err "Trade already confirmed"))
  )
)

(define-public (confirm-receipt (trade-id string))
  (let (
        (trade (unwrap! (map-get? trades trade-id) (err "Trade not found")))
        (seller (get 0 trade))
        (assets (get 1 trade))
        (total-price (get 2 trade))
        (paid-amount (get 3 trade))
        (confirmed (get 4 trade))
      )
    (if (and (not confirmed) (= paid-amount total-price))
      (begin
        (map-set trades trade-id (tuple seller assets total-price paid-amount true))
        (print (event trade-confirmed trade-id seller total-price))
        (ok "Trade confirmed, payment released to seller"))
      (err "Trade incomplete or already confirmed"))
  )
)

(define-public (refund (trade-id string) (reason (optional (string))))
  (let (
        (trade (unwrap! (map-get? trades trade-id) (err "Trade not found")))
        (seller (get 0 trade))
        (assets (get 1 trade))
        (total-price (get 2 trade))
        (paid-amount (get 3 trade))
        (confirmed (get 4 trade))
      )
    (if (and (not confirmed) (> (as-int (block-height)) (+ (as-int (block-height)) 100)))
      (begin
        (map-delete trades trade-id)
        (print (event trade-refunded trade-id tx-sender paid-amount))
        (if (is-some? reason)
          (print (event dispute-raised trade-id (default "No reason provided" reason))))
        (ok "Refund successful"))
      (err "Refund not applicable or trade already confirmed"))
  )
)
